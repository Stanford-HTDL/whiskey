name: api-config

services:

  api:
    build:
      context: .
      dockerfile: api.Dockerfile
    environment:
      - APP_BROKER_URI=${APP_BROKER_URI}
      - APP_BACKEND_URI=${APP_BACKEND_URI}
      - API_KEYS_PATH=${API_KEYS_PATH}
      - APP_TITLE=${APP_TITLE}
      - APP_DESCRIPTION=${APP_DESCRIPTION}
      - APP_VERSION=${APP_VERSION}
      - CELERY_APP_NAME=${CELERY_APP_NAME}
      - CELERY_APP_INCLUDE=${CELERY_APP_INCLUDE}
      - MODULE_NAME=${APP_MODULE_NAME}
    restart: always
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.app.loadbalancer.server.port=80
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.app-http.entrypoints=http
      - traefik.http.routers.app-http.rule=Host(`${API_URL}`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Make Traefik use this domain in HTTPS
      - traefik.http.routers.app-https.entrypoints=https
      - traefik.http.routers.app-https.rule=Host(`${API_URL}`)
      - traefik.http.routers.app-https.tls=true
      # Use the "le" (Let's Encrypt) resolver
      - traefik.http.routers.app-https.tls.certresolver=le
      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Middleware to redirect HTTP to HTTPS
      - traefik.http.routers.app-http.middlewares=https-redirect
      # - traefik.http.routers.app-https.middlewares=admin-auth
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public
      - bridge-net

networks:

  traefik-public:
    name: traefik_public
    external: true

  bridge-net:
    name: bridge_net
    external: true
