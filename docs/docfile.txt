# `Whiskey` Documentation
# Richard Correro (richard@irchardcorrero.com)

This project provides a web-deployed API using FastAPI with Uvicorn and Traefik, along with RabbitMQ and Redis with Celery for task processing. The entire application stack is containerized using Docker and orchestrated with Docker Compose. The API requires OAuth access keys for authentication and authorization, and it submits jobs to Celery workers running on a separate virtual machine instance.

====================
Module Documentation: celery.py

This module initializes and configures a Celery application for task processing.

Author:
- Richard Correro (richard@richardcorrero.com)

Variables:
- CELERY_APP_NAME: str
  - The name of the Celery application. It is obtained from the environment variable "CELERY_APP_NAME".
- CELERY_APP_INCLUDE: str
  - The name of the module or package to include in the Celery application. It is obtained from the environment variable "CELERY_APP_INCLUDE".
- APP_BROKER_URI: str
  - The URI of the message broker used by Celery. It is obtained from the environment variable "APP_BROKER_URI".
- APP_BACKEND_URI: str
  - The URI of the backend used by Celery for storing task results. It is obtained from the environment variable "APP_BACKEND_URI".

Functions:
- celery_app.start()
  - Starts the Celery application.

Classes:
- celery.Celery
  - Represents a Celery application for task processing.

Initialization:
- The Celery application is initialized using the provided CELERY_APP_NAME, APP_BROKER_URI, APP_BACKEND_URI, and CELERY_APP_INCLUDE values.
- The Celery application is configured with an optional "result_expires" parameter set to 3600 seconds.

Usage:
- To start the Celery application, run the module as the main script.

Note:
- Ensure that the required environment variables (CELERY_APP_NAME, CELERY_APP_INCLUDE, APP_BROKER_URI, APP_BACKEND_URI) are properly set before running the script.


Module Documentation: exceptions.py

This module defines custom exception classes used in the application.

Author:
- Richard Correro (richard@richardcorrero.com)

Classes:
- MalformedDateStringError(Exception):
  This exception class is raised when a time string is in an unexpected or malformed format.
  It inherits from the base `Exception` class.

- IDNotFoundError(Exception):
  This exception class is raised when an ID is not found or does not exist.
  It inherits from the base `Exception` class.

Module Documentation: main.py

This module contains a FastAPI application that provides endpoints for analyzing and processing data. It interacts with Redis for task management and Celery for task execution.

Author:
- Richard Correro (richard@richardcorrero.com)

Dependencies:
- json
- os
- datetime from datetime
- Any, List, Tuple, Union from typing
- redis
- AsyncResult from celery.result
- gen_unique_id from celery.utils
- Depends, FastAPI, HTTPException, status from fastapi
- OAuth2PasswordBearer from fastapi.security
- RedirectResponse from starlette.responses

Environment Variables:
- API_KEYS_PATH: Path to the file containing valid API keys.
- APP_TITLE: Title of the FastAPI application.
- APP_DESCRIPTION: Description of the FastAPI application.
- APP_VERSION: Version of the FastAPI application.
- REDIS_HOST: Redis server host.
- REDIS_PORT: Redis server port.
- REDIS_STORE_DB_INDEX: Redis database index for storing task information.

Functions:
- api_key_auth(api_key: str = Depends(oauth2_scheme)) -> None:
  This function is a dependency that validates the API key provided in the request header.
  It raises an HTTPException with status code 401 if the API key is not valid.

- redirect() -> RedirectResponse:
  This function is the root endpoint that redirects to the "/redoc" endpoint.

- run_analysis(params: TargetParams, api_key: str = Depends(oauth2_scheme)) -> dict:
  This function is the "/analyze" endpoint that processes the analysis task.
  It accepts a JSON payload containing target parameters and an API key.
  It validates the target_geojson field and checks for duplicate tasks.
  It generates a unique ID for the task, stores task information in Redis, and sends the task to Celery for execution.
  It returns a JSON response containing the URL for the status endpoint and the task UID.

- make_media(params: MediaParams, api_key: str = Depends(oauth2_scheme)) -> dict:
  This function is the "/media" endpoint that processes the media task.
  It accepts a JSON payload containing media parameters and an API key.
  It validates the target_geojson field and checks for duplicate tasks.
  It generates a unique ID for the task, stores task information in Redis, and sends the task to Celery for execution.
  It returns a JSON response containing the URL for the status endpoint and the task UID.

- get_status(uid: str, api_key: str = Depends(oauth2_scheme)) -> dict:
  This function is the "/status/{uid}" endpoint that retrieves the status of a task.
  It accepts the task UID and an API key.
  It checks if the task is completed or running and returns the corresponding status.
  If the task is completed, it returns the result of the task if successful, or a failure status if not.

Variables:
- valid_api_keys: List[str]
  A list of valid API keys loaded from the API_KEYS_PATH file.

- app: FastAPI
  The FastAPI application instance with the specified title, description, and version.

- redis_client: redis.Redis
  The Redis client instance connected to the Redis server specified by the host, port, and database index.

- oauth2_scheme: OAuth2PasswordBearer
  The OAuth2 password bearer authentication scheme for validating API keys.

- API_KEYS_PATH: str
  Path to the file containing valid API keys loaded from the environment variable.

- APP_TITLE: str
  Title of the FastAPI application loaded from the environment variable.

- APP_DESCRIPTION: str
  Description of the FastAPI application loaded from the environment variable.

- APP_VERSION: str
  Version of the FastAPI application loaded from the environment variable.

- REDIS_HOST: str
  Redis server host loaded from the environment variable.

- REDIS_PORT: int
  Redis server port loaded from the environment variable.

- REDIS_STORE_DB_INDEX: int
  Redis database index for storing task information loaded from the environment variable.

Module Documentation: models.py

This module contains the definition of two Pydantic models: `TargetParams` and `MediaParams`. These models are used to define the request payload for the corresponding endpoints in the FastAPI application.

Author:
- Richard Correro (richard@richardcorrero.com)

Dependencies:
- List from typing
- BaseModel, Field from pydantic

Classes:
- TargetParams(BaseModel):
  This class represents the request payload for the "/analyze" endpoint in the FastAPI application.
  It inherits from the `BaseModel` class provided by Pydantic.

  Attributes:
  - start: str | None
    The start month (inclusive) in the format "%Y_%m".
    It is an optional field with a default value of "2023_01".
    The field is validated to have a maximum length of 7 and a minimum length of 7.

  - stop: str | None
    The stop month (exclusive) in the format "%Y_%m".
    It is an optional field with a default value of "2023_02".
    The field is validated to have a maximum length of 7 and a minimum length of 7.

  - target_geojsons: List[str] | None
    A list of GeoJSONs encoded as strings that demarcate the region for analysis.
    It is an optional field with a default value of [geojson_str], where `geojson_str` is a predefined GeoJSON string.
    The field represents multiple GeoJSONs, allowing analysis on multiple regions.

  - bbox_threshold: float
    A value used to determine whether to consider a predicted bounding box as a positive.
    The value must be in the range [0, 1].
    It has a default value of 0.95.

- MediaParams(BaseModel):
  This class represents the request payload for the "/media" endpoint in the FastAPI application.
  It inherits from the `BaseModel` class provided by Pydantic.

  Attributes:
  - start: str | None
    The start month (inclusive) in the format "%Y_%m".
    It is an optional field with a default value of "2022_01".
    The field is validated to have a maximum length of 7 and a minimum length of 7.

  - stop: str | None
    The stop month (exclusive) in the format "%Y_%m".
    It is an optional field with a default value of "2023_01".
    The field is validated to have a maximum length of 7 and a minimum length of 7.

  - target_geojsons: List[str] | None
    A list of GeoJSONs encoded as strings that demarcate the region for which media will be created.
    It is an optional field with a default value of [geojson_str], where `geojson_str` is a predefined GeoJSON string.
    The field represents multiple GeoJSONs, allowing media creation for multiple regions.

Module Documentation: utils.py

This module contains utility functions used in various parts of the application.

Author:
- Richard Correro (richard@richardcorrero.com)

Dependencies:
- hashlib
- json
- random
- string
- datetime from datetime
- List, Optional, Union from typing
- Inspect from celery.app.control
- MalformedDateStringError from exceptions (assumed to be defined in a separate file)

Functions:
- is_task_known(task_id: str, inspect_obj: Inspect) -> bool:
  This function checks whether a task with the given task ID is known or scheduled for execution.
  It takes a task ID as a string and an `Inspect` object as parameters.
  It returns a boolean value indicating whether the task is known or not.

- is_json(json_str: str) -> bool:
  This function checks whether a given string is a valid JSON.
  It takes a JSON string as a parameter.
  It returns a boolean value indicating whether the string is valid JSON or not.

- hash_string(string: str) -> str:
  This function hashes a given string using the SHA-256 algorithm.
  It takes a string as a parameter and returns the hashed string as a hexadecimal string.

- get_api_keys(api_keys_path: str) -> List[str]:
  This function reads a JSON file containing API keys and returns a list of the keys.
  It takes the path to the JSON file as a parameter and returns a list of API keys.

- generate_uid(uid_len: Optional[int] = 64) -> str:
  This function generates a unique identifier (UID) of a specified length.
  It takes an optional parameter `uid_len` to specify the length of the UID.
  It returns the generated UID as a string.

- get_datetime(time_str: str) -> datetime:
  This function converts a string representation of time in the format "%Y_%m" to a datetime object.
  It takes a time string as a parameter and returns a datetime object.
  If the time string is not in the expected format, it raises a `MalformedDateStringError`.
